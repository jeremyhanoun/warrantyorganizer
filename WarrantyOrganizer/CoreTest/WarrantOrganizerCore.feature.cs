// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CoreTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("WarrantOrganizerCore")]
    public partial class WarrantOrganizerCoreFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WarrantOrganizerCore.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WarrantOrganizerCore", "\tIn order to facilitate my search of warranty proof and details\r\n\tAs a buyer\r\n\tI " +
                    "want to save all my warranty proofs and attached details", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register a new warranty")]
        public virtual void RegisterANewWarranty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register a new warranty", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the following receipt located at \"C:\\Users\\JIM\\Pictures\\Samsung\\CLX-3180_20160417" +
                    "_21135507.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Brand",
                        "Product name",
                        "Date of purchase",
                        "Warranty period"});
            table1.AddRow(new string[] {
                        "Philips",
                        "SCF 356",
                        "2015-10-04",
                        "1 Year"});
#line 9
 testRunner.And("the attached product details", ((string)(null)), table1, "And ");
#line 12
 testRunner.When("I save them", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the saved product details are available for search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new details to a saved product")]
        public virtual void AddNewDetailsToASavedProduct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new details to a saved product", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Brand",
                        "Product Name",
                        "Date of purchase",
                        "Warranty period"});
            table2.AddRow(new string[] {
                        "Philips",
                        "SCF 356",
                        "2015-10-04",
                        "1 Year"});
#line 17
 testRunner.Given("the following save product", ((string)(null)), table2, "Given ");
#line 20
 testRunner.And("the following optional Description Chauffe biberon Avent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("I update it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("the new optional details is available for search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for a product by its name")]
        public virtual void SearchForAProductByItsName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for a product by its name", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Brand",
                        "Product Name",
                        "Date of purchase",
                        "Warranty period",
                        "Description"});
            table3.AddRow(new string[] {
                        "Philips",
                        "SCF 356",
                        "2015-10-04",
                        "1 Year",
                        "Chauffe biberon Avent"});
#line 25
 testRunner.Given("the following saved product", ((string)(null)), table3, "Given ");
#line 28
 testRunner.When("I search for Product name SCF 356", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Brand",
                        "Product Name",
                        "Date of purchase",
                        "Warranty period",
                        "Description"});
            table4.AddRow(new string[] {
                        "Philips",
                        "SCF 356",
                        "2015-10-04",
                        "1 Year",
                        "Chauffe biberon Avent"});
#line 29
 testRunner.Then("the result should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
